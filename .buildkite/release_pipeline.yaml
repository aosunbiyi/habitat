steps:

  # We do this to ensure a clean slate every time, just in case we had
  # a failed release process that left things behind.
  #
  # It also has the nice side effect of getting our habitat-release
  # worker queue warmed up
  #
  # It's OK if the release channel doesn't exist at this stage; thus
  # the /bin/true fallback
  - label: ":habicat: :boom: Destroy release channel"
    command: .buildkite/scripts/destroy_release_channel.sh || /bin/true
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - wait

  - label: ":linux: :habicat: core/hab"
    command: .buildkite/scripts/build_component.sh hab
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :habicat: core/hab"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - label: ":mac: :habicat: core/hab"
    command: .buildkite/scripts/build_mac_release.sh
    # skip: "Working on something else now"
    concurrency_group: "habitat/release/macos"
    # We only want to run one build at a time because these are long-lived VMs and the builds
    # are by definition not very isolated
    concurrency: 1
    agents:
      # This is the only queue that has Mac builders at the moment;
      # they're also not being used by anyone else.
      queue: omnibus
      os: Darwin
      "os:version": 10.11 # Build statically on the oldest thing we can

  - wait

  - label: ":linux: :habicat: :hammer_and_wrench: core/hab-plan-build"
    command: .buildkite/scripts/build_component.sh plan-build
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :habicat: :hammer_and_wrench: core/hab-plan-build-ps1"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  # This must pull in the core/hab we built ^^^
  - label: ":linux: :habicat: core/hab-bintray-publish"
    command: .buildkite/scripts/build_component.sh bintray-publish
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :habicat: core/hab-bintray-publish"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - wait

  # This must pull in the core/backline we built ^^^
  - label: ":drum_with_drumsticks: :habicat: :drum_with_drumsticks: core/hab-backline"
    command: .buildkite/scripts/build_component.sh backline
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - wait

  # TODO: This only depends on core/hab, so it could theoretically be built alongside plan-build and backline
  - label: ":linux: :habicat: core/hab-studio"
    command: .buildkite/scripts/build_component.sh studio
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :habicat: core/hab-studio"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - wait

  - label: ":linux: :habicat: core/hab-sup"
    command: .buildkite/scripts/build_component.sh sup
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :habicat: core/hab-sup"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - wait

  # Exporters

  # TODO: Create an ACI emoji
  - label: ":habicat: core/hab-pkg-aci"
    command: .buildkite/scripts/build_component.sh pkg-aci
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":linux: :docker: core/hab-pkg-export-docker"
    command: .buildkite/scripts/build_component.sh pkg-export-docker
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :docker: core/hab-pkg-export-docker"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - label: ":k8s: core/hab-pkg-export-kubernetes"
    command: .buildkite/scripts/build_component.sh pkg-export-kubernetes
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":helm: core/hab-pkg-export-helm"
    command: .buildkite/scripts/build_component.sh pkg-export-helm
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":linux: :package: core/hab-pkg-export-tar"
    command: .buildkite/scripts/build_component.sh pkg-export-tar
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: :package: core/hab-pkg-export-tar"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  # TODO: Create a Mesos emoji
  - label: ":habicat: core/hab-pkg-mesosize"
    command: .buildkite/scripts/build_component.sh pkg-mesosize
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - wait

  # The cfize export currently has a dependency on
  # hab-pkg-export-docker, so it must be built after that.
  - label: ":cloudfoundry: core/hab-pkg-cfize"
    command: .buildkite/scripts/build_component.sh pkg-cfize
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  # - wait

  # - label: "just some crap"
  #   command: buildkite-agent meta-data set hab-artifact core-hab-0.57.0-dev-20180606132059-x86_64-linux.hart
  #   agents:
  #     queue: habitat-release

  - wait

  # TODO Create a JFrog emoji
  - label: ":linux: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/upload_to_bintray.sh
    # skip: "Working on something else now"
    agents:
      queue: habitat-release

  - label: ":windows: Upload (but don't publish!) artifacts to Bintray"
    command: /bin/true
    skip: "No Windows builders yet"
    agents:
      queue: habitat-release

  - label: ":mac: Upload (but don't publish!) artifacts to Bintray"
    command: .buildkite/scripts/upload_to_bintray_macos.sh
    # skip: "Working on something else now"
    agents:
      queue: habitat-release
      # NOTE: We don't need to run this on a Mac.

  - block: ":thumbsup: Select Launcher Versions to Promote to Release Channel"
    prompt: |
      Which `core/hab-launcher` versions should be in the release
      channel? This is helpful for validating a release, since all
      required packages will be in the same channel.

      Provide the `version/release` pair for each platform (e.g., `7797/20180625172404`).

      Providing no value means that the current stable releases will be
      used. This is OK, because promoting something already `stable`
      to `stable` is a no-op.
    fields:
      - text: Linux Launcher
        key: linux-launcher
        hint: What is the `version/release` for the desired Linux Launcher?
        required: false
      - text: Windows Launcher
        key: windows-launcher
        hint: What is the `version/release` for the desired Windows Launcher?
        required: false

  - label: "Promoting Launcher Versions"
    # skip: "Working on something else now"
    command: .buildkite/scripts/promote_launchers.sh
    agents:
      queue: habitat-release

  - block: ":shipit: :question:"
    # skip: "Working on something else now"
    prompt: "Is it good to release, or do we need to go back to the drawing board?"
    fields:
      - select: "Action"
        required: true
        key: "release-action"
        options:
          - label: "Release"
            value: "release"
          - label: "Abort"
            value: "abort"

  - label: ":pipeline:"
    # skip: "Working on something else now"
    command: .buildkite/scripts/finish_release.sh
    agents:
      queue: pipeline-trigger
